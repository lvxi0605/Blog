<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd">

    <!--载入系统配置参数-->
    <context:property-placeholder location="classpath:config/system.properties"/>

    <!--jsp视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
        <property name="order" value="1"/>
        <property name="prefix" value="/WEB-INF/pages/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- velocity视图解析器 -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="order" value="0"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="cache" value="true"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".vm"/>
        <!--<property name="layoutUrl" value="layout/default.vm"/>-->
        <!--<property name="exposeSpringMacroHelpers" value="true" />-->
        <!--<property name="dateToolAttribute" value="dateTool"/>-->
        <!--<property name="numberToolAttribute" value="numberTool"/>-->
    </bean>
    <!-- velocity环境配置 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <!-- velocity配置文件路径 -->
        <property name="configLocation" value="classpath:config/velocity.properties"/>
        <!-- velocity模板路径 -->
        <property name="resourceLoaderPath" value="/WEB-INF/pages/velocity/"/>
    </bean>

    <!--&lt;!&ndash; velocity视图解析器 &ndash;&gt;-->
    <!--<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">-->
        <!--<property name="cache" value="true"/>-->
        <!--<property name="prefix" value="/"/>-->
        <!--<property name="suffix" value=".vm"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; velocity环境配置 &ndash;&gt;-->
    <!--<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">-->
        <!--&lt;!&ndash; velocity配置文件路径 &ndash;&gt;-->
        <!--<property name="configLocation" value="/WEB-INF/velocity.properties"/>-->
        <!--&lt;!&ndash; velocity模板路径 &ndash;&gt;-->
        <!--<property name="resourceLoaderPath" value="/WEB-INF/velocity/"/>-->
    <!--</bean>-->


    <!--静态资源由WEB服务器默认的Servlet来处理-->
    <mvc:default-servlet-handler/>

    <mvc:resources mapping="/plugins/**" location="/WEB-INF/resources/plugins/" />
    <mvc:resources mapping="/css/**" location="/WEB-INF/resources/css/" />
    <mvc:resources mapping="/html/**" location="/WEB-INF/resources/html/" />
    <mvc:resources mapping="/js/**" location="/WEB-INF/resources/js/" />
    <mvc:resources mapping="/less/**" location="/WEB-INF/resources/less/" />
    <mvc:resources mapping="/image/**" location="/WEB-INF/resources/image/" />
    <!--注册数据转换类-->
    <!--<mvc:annotation-driven conversion-service="converterUtil" />-->
    <!--<bean id="converterUtil" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
        <!--<property name="converters">-->
            <!--<util:list>-->
                <!--<bean class="edu.jxufe.lvxi.util.TimestampConverter" />-->
            <!--</util:list>-->
        <!--</property>-->
    <!--</bean>-->


    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=utf-8</value>
                        <!--<value>text/html;charset=UTF-8</value>-->
                    </list>
                </property>
                <property name="features">
                    <array>
                        <value>WriteMapNullValue</value>
                        <value>WriteNullStringAsEmpty</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"-->
    <!--p:defaultEncoding="UTF-8"/>-->


    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"></mvc:mapping>
            <bean class="edu.jxufe.lvxi.blog.web.interceptor.RequestInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>


<!--
      说明:
        1)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6
          否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串
        2)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的
          因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了
          如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8]
        3)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.Java
          它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等
          QuoteFieldNames          输出key时是否使用双引号,默认为true
          WriteMapNullValue        是否输出值为null的字段,默认为false
          WriteNullNumberAsZero    数值字段如果为null,输出为0,而非null
          WriteNullListAsEmpty     List字段如果为null,输出为[],而非null
          WriteNullStringAsEmpty   字符类型字段如果为null,输出为"",而非null
          WriteNullBooleanAsFalse  Boolean字段如果为null,输出为false,而非null
        4)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames
          这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段
        5)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty
          经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串

-->


